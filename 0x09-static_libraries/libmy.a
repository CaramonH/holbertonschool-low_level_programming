!<arch>
0-isupper.c/    0           0     0     644     251       `
#include "main.h"

/**
 * _isupper - Program that checks for an uppercase letter
 * @x: The number being checked
 *
 * Return: 1 for upper letter or 0 for any else
 */
int _isupper(int x)
{
	if (x >= 65 && x <= 90)
	{
		return (1);
	}

	return (0);
}

0-memset.c/     0           0     0     644     326       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 * @s: memory area to fill
 * @b: constant byte to fill
 * @n: bytes of memory are to fill
 * Return: the memory area filled
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int a;

	for (a = 0; a < n; a++)
	{
		s[a] = b;
	}

	return (s);
}
0-strcat.c/     0           0     0     644     412       `
#include "holberton.h"
#include <stdio.h>

/**
  * _strcat - Concatenates two strings
  * @dest: The destination string
  * @src: The source string
  *
  * Return: A pointer to the resulting string dest
  */
char *_strcat(char *dest, char *src)
{
	int dlen = 0, i;

	while (dest[dlen])
	{
		dlen++;
	}

	for (i = 0; src[i] != 0; i++)
	{
		dest[dlen] = src[i];
		dlen++;
	}

	dest[dlen] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     51        `
#include "main.h"
int _atoi(void)
{
	return (0);
}

1-isdigit.c/    0           0     0     644     256       `
#include "main.h"

/**
 * _isdigit - Check if a character is a digit
 * @x: The number being checked
 *
 * Return: 1 for a character that will be a digit 0 for any else
 */
int _isdigit(int x)
{
	if (x >= 48 && x <= 57)
	{
		return (1);
	}

	return (0);
}
1-memcpy.c/     0           0     0     644     340       `
#include "main.h"

/**
 * _memcpy - copies memory area
 * @dest: destination memory area
 * @src: source memory area
 * @n: bytes from the memory area to copy
 * Return: memory area replaced
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int a;

	for (a = 0; a < n; a++)
	{
		dest[a] = src[a];
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     441       `
#include "holberton.h"

/**
  * _strncat - Concatenates two strings
  * @dest: destination value
  * @src: source value
  * @n: limit of the concatenation
  *
  * Return: A pointer to the resulting string dest
  */
char *_strncat(char *dest, char *src, int n)
{
	int dlen = 0, j = 0;

	while (dest[dlen])
	{
		dlen++;
	}

	while (j < n && src[j])
	{
		dest[dlen] = src[j];
		dlen++;
		j++;
	}

	dest[dlen + n + 1] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     338       `
#include "main.h"

/**
 * _strchr - locate character in string
 * @s: source string
 * @c: character to find
 *
 * Return: the string from charcter found
 */

char *_strchr(char *s, char c)
{
	int a = 0, b;

	while (s[a])
	{
		a++;
	}

	for (b = 0; b <= a; b++)
	{
		if (c == s[b])
		{
			s += b;
			return (s);
		}
	}

	return ('\0');
}
2-strlen.c/     0           0     0     644     212       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: string
 *
 * Return: length of string
 */

int _strlen(char *s)
{
	int len = 0;

	while (s[len] != '\0')
	{
		len++;
	}

	return (len);
}
2-strncpy.c/    0           0     0     644     381       `
#include "holberton.h"

/**
  * _strncpy - Copy a string
  * @dest: destination value
  * @src: source value
  * @n: copy limit
  *
  * Return: char value
  */
char *_strncpy(char *dest, char *src, int n)
{
	int a = 0, b = 0;

	while (src[b])
	{
		b++;
	}

	while (a < n && src[a])
	{
		dest[a] = src[a];
		a++;
	}

	while (a < n)
	{
		dest[a] = '\0';
		a++;
	}

	return (dest);
}

3-islower.c/    0           0     0     644     220       `
#include "main.h"

/**
 * _islower - checks for lowercase
 * @c: c is an ascii character
 *
 * Return: 1 if lowercase
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     239       `
#include "main.h"

/**
 * _puts - prints a string, followed by a new line, to stdout
 * @str: string
 *
 * Return: void
 */

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}

	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     282       `
#include "holberton.h"

/**
 * _strcmp - compares two strings
 * @s1: container of string 1
 * @s2: container of string 2
 * Return: 0 if the strings are the same
 */

int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     383       `
#include "main.h"

/**
 * _strspn - get the lenght of prefix substring
 * @s:string
 * @accept:string
 * Return:unsigned int
 */

unsigned int _strspn(char *s, char *accept)
{
unsigned int x;
int i;

x = 0;
while (*s)
{
	for (i = 0; accept[i]; i++)
	{
		if (*s == accept[i])
		{
			x++;
			break;
		}
		else if (accept[i + 1] == '\0')
		{
			return (x);
		}
	}
	s++;
}
return (x);
}

4-isalpha.c/    0           0     0     644     282       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 * @c: c is an ascii character
 *
 * Return: 1 (if letter)
 */

int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     398       `
#include "main.h"

/**
 * _strpbrk - Searches a string for any of a set of bytes
 * @s: string to search
 * @accept: bytes accepted
 *
 * Return: Return pointer to first occurance of byte
 */

char *_strpbrk(char *s, char *accept)
{
	int i, n;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (n = 0; accept[n] != '\0'; n++)
		{
			if (s[i] == accept[n])
			{
			return (s + i);
			}
		}
	}
return (0);
}
5-strstr.c/     0           0     0     644     551       `
#include "main.h"

/**
 * _strstr - find first occurance of given string in another string
 * @haystack: string to search through
 * @needle: string to search for
 *
 * Return: pointer to beginning of lcoated string
 */

char *_strstr(char *haystack, char *needle)
{
	char *start;
	char *search;

	while (*haystack != '\0')
	{
		start = haystack;
		search = needle;
		while (*search == *haystack && *haystack != 0
			&& *search != 0)
		{
			haystack++;
			search++;
		}
		if (*search == 0)
			return (start);
		haystack = start + 1;
	}
	return (0);
}

6-abs.c/        0           0     0     644     237       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer
 *@n: n is an integer
 * Return: integer
 */

int _abs(int n)
{
	if (n > 0)
	{
		return (n);
	}
	else if (n < 0)
	{
		return (-n);
	}
	else
	{
		return (n);
	}
}

9-strcpy.c/     0           0     0     644     313       `
#include "main.h"

/**
 * _strcpy - copies the string pointed to by src into dest
 * @dest: destination
 * @src: source
 * Return: char with copy of string
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; *(src + i) != '\0'; i++)
	{
		dest[i] = *(src + i);
	}
	dest[i] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
  return (write(1, &c, 1));
}
